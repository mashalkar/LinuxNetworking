$ Namespaces

Create namespaces
# ip netns add red
# ip netns add blue

List namespaces
# ip netns

List nic inside namespaces
# ip netns exec red ip link 
or
# ip -n red link

List arp table inside namespace
# ip netns exec red arp

Join two namespaces 
# ip link add veth-red type veth peer name veth-blue
# ip link set veth-red netns red
# ip link set veth-blue netns blue

Add IP Address to nics
# ip -n red addr add 192.190.1.1/24 dev veth-red
# ip -n blue addr add 192.190.1.2/24 dev veth-blue

Set link up
# ip -n red link set veth-red up
# ip -n blue link set veth-blue up

Virtual switches: 1) Linux native bridge  2) OpenVswitch
Linux bridge

Create the bridge:
# ip link add veth-br0 type bridge
# ip link set veth-br0 up

Create the link cable:
# ip link add veth-red type veth peer name veth-red-br0
# ip link add veth-blue type veth peer name veth-red-br0

Attach the link cable to namespaces:
# ip link set veth-red netns red
# ip link set veth-blue netns blue

Attach other side of cable to switch:
# ip link set veth-red-br0 master veth-br0
# ip link set veth-blue-br0 msater veth-br0

Add IP Addresses:
# ip -n red addr add 192.168.15.1/24 dev veth-red
# ip -n blue addr add 192.168.15.2/24 dev veth-blue
# ip addr add 192.168.15.3/24 dev veth-br0

Link up:
# ip -n red link set veth-red up
# ip -n blue link set veth-blue up

Enable route
# iptables  -t nat -A POSTROUTING -s 192.168.15.0/24 -j MASQUERADE

Adding route to namespaces:
# ip netns exec red ip route add 192.168.1.0/24 via 192.168.15.3/24
# ip netns exec blue ip route add 192.168.1.0/24 via 192.168.15.3/24
